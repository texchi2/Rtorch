#!/usr/bin/env python3
# using hash bang to execute $ python3 merge_tiles.py
# run python under R reticulate package
# https://www.r-bloggers.com/2022/04/getting-started-with-python-using-r-and-reticulate/
# https://rstudio.github.io/reticulate/reference/install_miniconda.html
```{r}
library(reticulate)
#x miniconda_path() is at "/home/tmm/.local/share/r-miniconda"
#x $ wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
#install_miniconda(path = miniconda_path(), update = TRUE, force = TRUE)
use_python("/usr/bin/python3")
## pip instead of conda
#$ sudo apt install python3-pip

reticulate::py_install("pyvips")
```


# merge by pyvips =>
#***sudo pip3 install pyvips
#*** sudo apt install libvips
# apt install python3.10-venv

# **2017 * https://stackoverflow.com/questions/49503195/reticulate-running-python-chunks-in-rmarkdown => quarto is better than Rmarkdown
# python code chunk must run as a chunk (not line by line), to good handle of python indent structure

```{python}
### merge_tiles.py
# step 1
# goal:
# TH2113193-Region 001.tif, TH2113193-Region 002.tif => TH2113193_HE.tif

# a list in python: https://www.askpython.com/python/list/iterate-through-list-in-python
# chatGPT prompt: please update my python code to do: 1) read TH*.tif filename in folder to produce list of structured_files with TH_id and regions variables. one example filename is "TH2123220-Region 008.tif", so TH_id should be extracted as "TH2123220", and regions should be "008". please update my code

import pyvips
import os
import re

stains = "Ki67" #  "p53" # "CK17" #"CK13"
files = []

files = os.listdir(f"/mnt/c/Users/User/Documents/TissueFAXS_OVH2022/TMUH2017/OVH_TMUH_2017_WSI_{stains}_Box1246/") #insert folder path
structured_files = []
file = []

for file in files:
    if file.endswith('.tif') and file.startswith('TH'):
        split_file = re.split("-| ", file)
        TH_id = split_file[0]
        region = split_file[-1].split('.')[0]
        print(TH_id, region)
        if len(split_file) > 3: 
          print("\x1b[6;30;42m" + "^....Warning: rename it!" + "\x1b[0m")
        structured_files.append({'TH_id': TH_id, 'regions': region})
        # structured_files.append({'TH_id': TH_id, 'regions': region})

#os.system('clear')
print(structured_files)
```
After step 1) import filenames in that folder,
(Remarks: please rename some of files according warning)

*** then Run step 1) again

Step 2) pyvips processes for tiles merging.


```{python}
# step 2
#### tiles = [pyvips.Image.new_from_file(f"{x}_{y}.jpeg", access="sequential")
#                 for y in range(height) for x in range(width)] 
# string process https://stackoverflow.com/questions/71214436/how-to-extract-data-from-a-filename-in-python-convert-file-name-to-string

regions = []
x = 0
while x < len(structured_files): # 0:47
  TH_id = structured_files[x]["TH_id"]
  regions.append(structured_files[x]["regions"])
  #y = x + 1
  for y in range(x + 1, len(structured_files)-1): # compare x and rest of list
    if structured_files[x]['TH_id'] == structured_files[y]['TH_id']:
      #TH_id from structured_files ??
      regions.append(structured_files[y]["regions"])
      #TH_id = "TH2123220"  #"TH2113193"
      #regions = ["008", "009", "010", "012"] #, "005", "006"]
      
  # merge tiles by *** Comprehensions of Python
  # https://rstudio.github.io/reticulate/articles/python_primer.html
  tiles = [pyvips.Image.new_from_file(f"/mnt/c/Users/User/Documents/TissueFAXS_OVH2022/TMUH2017/OVH_TMUH_2017_WSI_{stains}_Box1246/{TH_id}-Region {yr}.tif", access="sequential") for yr in regions] 
  print([f"{TH_id}-Region {yr}.tif" for yr in regions])  
  # HE, CK13
  #stains = "CK13"
  image = pyvips.Image.arrayjoin(tiles, across= len(regions), background=255) # white
  image.write_to_file(f"/mnt/c/Users/User/Documents/TissueFAXS_OVH2022/TMUH2017/{TH_id}_{stains}.tif", compression="deflate", tile=True)
  #"jpeg", tile=True)
  # lzw or deflate by Adobe
  
  # https://stackoverflow.com/questions/17837316/how-do-i-skip-a-few-iterations-in-a-for-loop  
  # next x, jump by x = x[::2]
  x += len(regions)
  regions = []

```
```{r}

```

#TIFF (Tagged Image File Format) is a file format for storing images. TIFF files support multiple "pages" or images as well as a variety of storage formats and compression methods. One of these storage formats is called the Tiled TIFF storage format.

#A Tiled TIFF image is composed of many square tiles of the same size (typically 256Ã—256 pixels). The advantage of the tiled format is that extremely large images can be loaded and displayed efficiently by loading only those tiles that are absolutely necessary (rather than loading a single, large (huge), monolithic image).
#An SVS file is a Tiled TIFF image that has a few additional pages (images) that include the slide label, overview image, and a few smaller, scaled copies of the scanned slide.
#We use the term Whole Scan Image to indicate any image format that contains a Region of Interest (ROI) scanned from a microscope slide. 


# Use compression to set the tiff compression. Currently jpeg, packbits, fax4, lzw, none, deflate, webp and zstd are supported. The default is no compression. JPEG compression is a good lossy compressor for photographs, packbits is good for 1-bit images, and deflate is the best lossless compression TIFF can do.

